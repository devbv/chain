// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: settlus/settlement/v1alpha1/event.proto

package types

import (
	fmt "fmt"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	types1 "github.com/settlus/chain/x/oracle/types"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type EventSettled struct {
	Tenant    uint64 `protobuf:"varint,1,opt,name=tenant,proto3" json:"tenant,omitempty"`
	UtxrId    uint64 `protobuf:"varint,2,opt,name=utxr_id,json=utxrId,proto3" json:"utxr_id,omitempty"`
	RequestId string `protobuf:"bytes,3,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (m *EventSettled) Reset()         { *m = EventSettled{} }
func (m *EventSettled) String() string { return proto.CompactTextString(m) }
func (*EventSettled) ProtoMessage()    {}
func (*EventSettled) Descriptor() ([]byte, []int) {
	return fileDescriptor_318f5afc0de44f41, []int{0}
}
func (m *EventSettled) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventSettled) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventSettled.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventSettled) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventSettled.Merge(m, src)
}
func (m *EventSettled) XXX_Size() int {
	return m.Size()
}
func (m *EventSettled) XXX_DiscardUnknown() {
	xxx_messageInfo_EventSettled.DiscardUnknown(m)
}

var xxx_messageInfo_EventSettled proto.InternalMessageInfo

func (m *EventSettled) GetTenant() uint64 {
	if m != nil {
		return m.Tenant
	}
	return 0
}

func (m *EventSettled) GetUtxrId() uint64 {
	if m != nil {
		return m.UtxrId
	}
	return 0
}

func (m *EventSettled) GetRequestId() string {
	if m != nil {
		return m.RequestId
	}
	return ""
}

type EventRecord struct {
	Sender     string       `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	Tenant     uint64       `protobuf:"varint,2,opt,name=tenant,proto3" json:"tenant,omitempty"`
	UtxrId     uint64       `protobuf:"varint,3,opt,name=utxr_id,json=utxrId,proto3" json:"utxr_id,omitempty"`
	RequestId  string       `protobuf:"bytes,4,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	Amount     types.Coin   `protobuf:"bytes,5,opt,name=amount,proto3" json:"amount"`
	Nft        *types1.Nft  `protobuf:"bytes,6,opt,name=nft,proto3" json:"nft,omitempty"`
	Recipients []*Recipient `protobuf:"bytes,7,rep,name=recipients,proto3" json:"recipients,omitempty"`
	Metadata   string       `protobuf:"bytes,8,opt,name=metadata,proto3" json:"metadata,omitempty"`
	CreatedAt  uint64       `protobuf:"varint,9,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
}

func (m *EventRecord) Reset()         { *m = EventRecord{} }
func (m *EventRecord) String() string { return proto.CompactTextString(m) }
func (*EventRecord) ProtoMessage()    {}
func (*EventRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_318f5afc0de44f41, []int{1}
}
func (m *EventRecord) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventRecord.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventRecord.Merge(m, src)
}
func (m *EventRecord) XXX_Size() int {
	return m.Size()
}
func (m *EventRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_EventRecord.DiscardUnknown(m)
}

var xxx_messageInfo_EventRecord proto.InternalMessageInfo

func (m *EventRecord) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *EventRecord) GetTenant() uint64 {
	if m != nil {
		return m.Tenant
	}
	return 0
}

func (m *EventRecord) GetUtxrId() uint64 {
	if m != nil {
		return m.UtxrId
	}
	return 0
}

func (m *EventRecord) GetRequestId() string {
	if m != nil {
		return m.RequestId
	}
	return ""
}

func (m *EventRecord) GetAmount() types.Coin {
	if m != nil {
		return m.Amount
	}
	return types.Coin{}
}

func (m *EventRecord) GetNft() *types1.Nft {
	if m != nil {
		return m.Nft
	}
	return nil
}

func (m *EventRecord) GetRecipients() []*Recipient {
	if m != nil {
		return m.Recipients
	}
	return nil
}

func (m *EventRecord) GetMetadata() string {
	if m != nil {
		return m.Metadata
	}
	return ""
}

func (m *EventRecord) GetCreatedAt() uint64 {
	if m != nil {
		return m.CreatedAt
	}
	return 0
}

type EventCancel struct {
	Tenant    uint64 `protobuf:"varint,1,opt,name=tenant,proto3" json:"tenant,omitempty"`
	UtxrId    uint64 `protobuf:"varint,2,opt,name=utxr_id,json=utxrId,proto3" json:"utxr_id,omitempty"`
	RequestId string `protobuf:"bytes,3,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (m *EventCancel) Reset()         { *m = EventCancel{} }
func (m *EventCancel) String() string { return proto.CompactTextString(m) }
func (*EventCancel) ProtoMessage()    {}
func (*EventCancel) Descriptor() ([]byte, []int) {
	return fileDescriptor_318f5afc0de44f41, []int{2}
}
func (m *EventCancel) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventCancel) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventCancel.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventCancel) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventCancel.Merge(m, src)
}
func (m *EventCancel) XXX_Size() int {
	return m.Size()
}
func (m *EventCancel) XXX_DiscardUnknown() {
	xxx_messageInfo_EventCancel.DiscardUnknown(m)
}

var xxx_messageInfo_EventCancel proto.InternalMessageInfo

func (m *EventCancel) GetTenant() uint64 {
	if m != nil {
		return m.Tenant
	}
	return 0
}

func (m *EventCancel) GetUtxrId() uint64 {
	if m != nil {
		return m.UtxrId
	}
	return 0
}

func (m *EventCancel) GetRequestId() string {
	if m != nil {
		return m.RequestId
	}
	return ""
}

type EventSettlementFailed struct {
	Tenant uint64 `protobuf:"varint,1,opt,name=tenant,proto3" json:"tenant,omitempty"`
	Reason string `protobuf:"bytes,2,opt,name=reason,proto3" json:"reason,omitempty"`
}

func (m *EventSettlementFailed) Reset()         { *m = EventSettlementFailed{} }
func (m *EventSettlementFailed) String() string { return proto.CompactTextString(m) }
func (*EventSettlementFailed) ProtoMessage()    {}
func (*EventSettlementFailed) Descriptor() ([]byte, []int) {
	return fileDescriptor_318f5afc0de44f41, []int{3}
}
func (m *EventSettlementFailed) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventSettlementFailed) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventSettlementFailed.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventSettlementFailed) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventSettlementFailed.Merge(m, src)
}
func (m *EventSettlementFailed) XXX_Size() int {
	return m.Size()
}
func (m *EventSettlementFailed) XXX_DiscardUnknown() {
	xxx_messageInfo_EventSettlementFailed.DiscardUnknown(m)
}

var xxx_messageInfo_EventSettlementFailed proto.InternalMessageInfo

func (m *EventSettlementFailed) GetTenant() uint64 {
	if m != nil {
		return m.Tenant
	}
	return 0
}

func (m *EventSettlementFailed) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

type EventDeployContract struct {
	Tenant          uint64 `protobuf:"varint,1,opt,name=tenant,proto3" json:"tenant,omitempty"`
	ContractAddress string `protobuf:"bytes,2,opt,name=contract_address,json=contractAddress,proto3" json:"contract_address,omitempty"`
	TokenName       string `protobuf:"bytes,3,opt,name=token_name,json=tokenName,proto3" json:"token_name,omitempty"`
	ContractAdmin   string `protobuf:"bytes,4,opt,name=contract_admin,json=contractAdmin,proto3" json:"contract_admin,omitempty"`
}

func (m *EventDeployContract) Reset()         { *m = EventDeployContract{} }
func (m *EventDeployContract) String() string { return proto.CompactTextString(m) }
func (*EventDeployContract) ProtoMessage()    {}
func (*EventDeployContract) Descriptor() ([]byte, []int) {
	return fileDescriptor_318f5afc0de44f41, []int{4}
}
func (m *EventDeployContract) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventDeployContract) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventDeployContract.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventDeployContract) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventDeployContract.Merge(m, src)
}
func (m *EventDeployContract) XXX_Size() int {
	return m.Size()
}
func (m *EventDeployContract) XXX_DiscardUnknown() {
	xxx_messageInfo_EventDeployContract.DiscardUnknown(m)
}

var xxx_messageInfo_EventDeployContract proto.InternalMessageInfo

func (m *EventDeployContract) GetTenant() uint64 {
	if m != nil {
		return m.Tenant
	}
	return 0
}

func (m *EventDeployContract) GetContractAddress() string {
	if m != nil {
		return m.ContractAddress
	}
	return ""
}

func (m *EventDeployContract) GetTokenName() string {
	if m != nil {
		return m.TokenName
	}
	return ""
}

func (m *EventDeployContract) GetContractAdmin() string {
	if m != nil {
		return m.ContractAdmin
	}
	return ""
}

func init() {
	proto.RegisterType((*EventSettled)(nil), "settlus.settlement.v1alpha1.EventSettled")
	proto.RegisterType((*EventRecord)(nil), "settlus.settlement.v1alpha1.EventRecord")
	proto.RegisterType((*EventCancel)(nil), "settlus.settlement.v1alpha1.EventCancel")
	proto.RegisterType((*EventSettlementFailed)(nil), "settlus.settlement.v1alpha1.EventSettlementFailed")
	proto.RegisterType((*EventDeployContract)(nil), "settlus.settlement.v1alpha1.EventDeployContract")
}

func init() {
	proto.RegisterFile("settlus/settlement/v1alpha1/event.proto", fileDescriptor_318f5afc0de44f41)
}

var fileDescriptor_318f5afc0de44f41 = []byte{
	// 530 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x53, 0x4d, 0x6f, 0xd3, 0x40,
	0x10, 0x8d, 0x9b, 0x90, 0xd6, 0x1b, 0xbe, 0x64, 0xa0, 0x98, 0x00, 0x26, 0x8a, 0xf8, 0x08, 0x02,
	0xad, 0x95, 0x72, 0xe0, 0xdc, 0x86, 0x16, 0xf5, 0xd2, 0x83, 0xb9, 0x21, 0x41, 0x34, 0x59, 0x4f,
	0x13, 0x8b, 0x78, 0x37, 0x78, 0x27, 0x51, 0xfb, 0x2f, 0xf8, 0x05, 0xfc, 0x9e, 0x1e, 0x7b, 0xe4,
	0x84, 0x20, 0xf9, 0x23, 0xc8, 0xeb, 0x35, 0xb1, 0x90, 0x9a, 0x13, 0x27, 0x7b, 0xde, 0xbe, 0x7d,
	0x6f, 0xe7, 0xed, 0x0e, 0x7b, 0xa1, 0x91, 0x68, 0x3a, 0xd7, 0xa1, 0xf9, 0x62, 0x8a, 0x92, 0xc2,
	0x45, 0x1f, 0xa6, 0xb3, 0x09, 0xf4, 0x43, 0x5c, 0xa0, 0x24, 0x3e, 0xcb, 0x14, 0x29, 0xef, 0xa1,
	0x25, 0xf2, 0x35, 0x91, 0x97, 0xc4, 0x76, 0x20, 0x94, 0x4e, 0x95, 0x0e, 0x47, 0xa0, 0x31, 0x5c,
	0xf4, 0x47, 0x48, 0xd0, 0x0f, 0x85, 0x4a, 0x64, 0xb1, 0xb9, 0xfd, 0xb4, 0x74, 0x51, 0x19, 0x88,
	0x29, 0xae, 0x1d, 0x8a, 0xda, 0xb2, 0x5e, 0x6f, 0x3a, 0x4b, 0xc5, 0xb6, 0x60, 0xdf, 0x1d, 0xab,
	0xb1, 0x32, 0xbf, 0x61, 0xfe, 0x57, 0xa0, 0xdd, 0xcf, 0xec, 0xfa, 0x61, 0x7e, 0xea, 0x0f, 0x86,
	0x1e, 0x7b, 0xbb, 0xac, 0x49, 0x28, 0x41, 0x92, 0xef, 0x74, 0x9c, 0x5e, 0x23, 0xb2, 0x95, 0x77,
	0x9f, 0x6d, 0xcf, 0xe9, 0x2c, 0x1b, 0x26, 0xb1, 0xbf, 0x55, 0x2c, 0xe4, 0xe5, 0x71, 0xec, 0x3d,
	0x66, 0x2c, 0xc3, 0xaf, 0x73, 0xd4, 0x94, 0xaf, 0xd5, 0x3b, 0x4e, 0xcf, 0x8d, 0x5c, 0x8b, 0x1c,
	0xc7, 0xdd, 0xdf, 0x5b, 0xac, 0x65, 0x0c, 0x22, 0x14, 0x2a, 0x33, 0xfa, 0x1a, 0x65, 0x8c, 0x99,
	0xd1, 0x77, 0x23, 0x5b, 0x55, 0x7c, 0xb7, 0xae, 0xf2, 0xad, 0x6f, 0xf0, 0x6d, 0xfc, 0xe3, 0xeb,
	0xbd, 0x65, 0x4d, 0x48, 0xd5, 0x5c, 0x92, 0x7f, 0xad, 0xe3, 0xf4, 0x5a, 0x7b, 0x0f, 0x78, 0x11,
	0x39, 0xcf, 0x23, 0xe7, 0x36, 0x72, 0x3e, 0x50, 0x89, 0x3c, 0x68, 0x5c, 0xfc, 0x7c, 0x52, 0x8b,
	0x2c, 0xdd, 0xe3, 0xac, 0x2e, 0x4f, 0xc9, 0x6f, 0x9a, 0x5d, 0x8f, 0x78, 0x79, 0x8b, 0x36, 0xf8,
	0x32, 0x5e, 0x7e, 0x72, 0x4a, 0x51, 0x4e, 0xf4, 0x8e, 0xf2, 0x73, 0x88, 0x64, 0x96, 0xa0, 0x24,
	0xed, 0x6f, 0x77, 0xea, 0xbd, 0xd6, 0xde, 0x73, 0xbe, 0xe1, 0xf2, 0x79, 0x54, 0xd2, 0xa3, 0xca,
	0x4e, 0xaf, 0xcd, 0x76, 0x52, 0x24, 0x88, 0x81, 0xc0, 0xdf, 0x31, 0xdd, 0xfc, 0xad, 0xf3, 0x5e,
	0x45, 0x86, 0x40, 0x18, 0x0f, 0x81, 0x7c, 0xd7, 0xe4, 0xe0, 0x5a, 0x64, 0x9f, 0xba, 0x9f, 0x6c,
	0xc4, 0x03, 0x90, 0x02, 0xa7, 0xff, 0xfd, 0x0a, 0xdf, 0xb3, 0x7b, 0x95, 0x27, 0x92, 0xf7, 0x72,
	0x04, 0xc9, 0xa6, 0xb7, 0xb2, 0xcb, 0x9a, 0x19, 0x82, 0x56, 0xd2, 0xf8, 0xb8, 0x91, 0xad, 0xba,
	0xdf, 0x1d, 0x76, 0xc7, 0x28, 0xbd, 0xc3, 0xd9, 0x54, 0x9d, 0x0f, 0x94, 0xa4, 0x0c, 0x04, 0x5d,
	0xa9, 0xf3, 0x92, 0xdd, 0x16, 0x96, 0x33, 0x84, 0x38, 0xce, 0x50, 0x6b, 0xab, 0x78, 0xab, 0xc4,
	0xf7, 0x0b, 0x38, 0x6f, 0x81, 0xd4, 0x17, 0x94, 0x43, 0x09, 0x29, 0x96, 0x2d, 0x18, 0xe4, 0x04,
	0x52, 0xf4, 0x9e, 0xb1, 0x9b, 0x15, 0xa5, 0x34, 0x91, 0xf6, 0xc1, 0xdc, 0x58, 0xeb, 0xa4, 0x89,
	0x3c, 0x38, 0xbc, 0x58, 0x06, 0xce, 0xe5, 0x32, 0x70, 0x7e, 0x2d, 0x03, 0xe7, 0xdb, 0x2a, 0xa8,
	0x5d, 0xae, 0x82, 0xda, 0x8f, 0x55, 0x50, 0xfb, 0xf8, 0x6a, 0x9c, 0xd0, 0x64, 0x3e, 0xe2, 0x42,
	0xa5, 0x61, 0x39, 0x75, 0x62, 0x02, 0x89, 0x0c, 0xcf, 0xaa, 0xd3, 0x47, 0xe7, 0x33, 0xd4, 0xa3,
	0xa6, 0x19, 0xad, 0x37, 0x7f, 0x02, 0x00, 0x00, 0xff, 0xff, 0xee, 0x1a, 0x05, 0x3a, 0x2c, 0x04,
	0x00, 0x00,
}

func (m *EventSettled) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventSettled) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventSettled) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RequestId) > 0 {
		i -= len(m.RequestId)
		copy(dAtA[i:], m.RequestId)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.RequestId)))
		i--
		dAtA[i] = 0x1a
	}
	if m.UtxrId != 0 {
		i = encodeVarintEvent(dAtA, i, uint64(m.UtxrId))
		i--
		dAtA[i] = 0x10
	}
	if m.Tenant != 0 {
		i = encodeVarintEvent(dAtA, i, uint64(m.Tenant))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *EventRecord) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventRecord) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventRecord) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CreatedAt != 0 {
		i = encodeVarintEvent(dAtA, i, uint64(m.CreatedAt))
		i--
		dAtA[i] = 0x48
	}
	if len(m.Metadata) > 0 {
		i -= len(m.Metadata)
		copy(dAtA[i:], m.Metadata)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.Metadata)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.Recipients) > 0 {
		for iNdEx := len(m.Recipients) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Recipients[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintEvent(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if m.Nft != nil {
		{
			size, err := m.Nft.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEvent(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	{
		size, err := m.Amount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintEvent(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	if len(m.RequestId) > 0 {
		i -= len(m.RequestId)
		copy(dAtA[i:], m.RequestId)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.RequestId)))
		i--
		dAtA[i] = 0x22
	}
	if m.UtxrId != 0 {
		i = encodeVarintEvent(dAtA, i, uint64(m.UtxrId))
		i--
		dAtA[i] = 0x18
	}
	if m.Tenant != 0 {
		i = encodeVarintEvent(dAtA, i, uint64(m.Tenant))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventCancel) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventCancel) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventCancel) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RequestId) > 0 {
		i -= len(m.RequestId)
		copy(dAtA[i:], m.RequestId)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.RequestId)))
		i--
		dAtA[i] = 0x1a
	}
	if m.UtxrId != 0 {
		i = encodeVarintEvent(dAtA, i, uint64(m.UtxrId))
		i--
		dAtA[i] = 0x10
	}
	if m.Tenant != 0 {
		i = encodeVarintEvent(dAtA, i, uint64(m.Tenant))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *EventSettlementFailed) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventSettlementFailed) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventSettlementFailed) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Reason) > 0 {
		i -= len(m.Reason)
		copy(dAtA[i:], m.Reason)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.Reason)))
		i--
		dAtA[i] = 0x12
	}
	if m.Tenant != 0 {
		i = encodeVarintEvent(dAtA, i, uint64(m.Tenant))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *EventDeployContract) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventDeployContract) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventDeployContract) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ContractAdmin) > 0 {
		i -= len(m.ContractAdmin)
		copy(dAtA[i:], m.ContractAdmin)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.ContractAdmin)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.TokenName) > 0 {
		i -= len(m.TokenName)
		copy(dAtA[i:], m.TokenName)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.TokenName)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ContractAddress) > 0 {
		i -= len(m.ContractAddress)
		copy(dAtA[i:], m.ContractAddress)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.ContractAddress)))
		i--
		dAtA[i] = 0x12
	}
	if m.Tenant != 0 {
		i = encodeVarintEvent(dAtA, i, uint64(m.Tenant))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintEvent(dAtA []byte, offset int, v uint64) int {
	offset -= sovEvent(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *EventSettled) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Tenant != 0 {
		n += 1 + sovEvent(uint64(m.Tenant))
	}
	if m.UtxrId != 0 {
		n += 1 + sovEvent(uint64(m.UtxrId))
	}
	l = len(m.RequestId)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	return n
}

func (m *EventRecord) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	if m.Tenant != 0 {
		n += 1 + sovEvent(uint64(m.Tenant))
	}
	if m.UtxrId != 0 {
		n += 1 + sovEvent(uint64(m.UtxrId))
	}
	l = len(m.RequestId)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = m.Amount.Size()
	n += 1 + l + sovEvent(uint64(l))
	if m.Nft != nil {
		l = m.Nft.Size()
		n += 1 + l + sovEvent(uint64(l))
	}
	if len(m.Recipients) > 0 {
		for _, e := range m.Recipients {
			l = e.Size()
			n += 1 + l + sovEvent(uint64(l))
		}
	}
	l = len(m.Metadata)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	if m.CreatedAt != 0 {
		n += 1 + sovEvent(uint64(m.CreatedAt))
	}
	return n
}

func (m *EventCancel) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Tenant != 0 {
		n += 1 + sovEvent(uint64(m.Tenant))
	}
	if m.UtxrId != 0 {
		n += 1 + sovEvent(uint64(m.UtxrId))
	}
	l = len(m.RequestId)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	return n
}

func (m *EventSettlementFailed) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Tenant != 0 {
		n += 1 + sovEvent(uint64(m.Tenant))
	}
	l = len(m.Reason)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	return n
}

func (m *EventDeployContract) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Tenant != 0 {
		n += 1 + sovEvent(uint64(m.Tenant))
	}
	l = len(m.ContractAddress)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.TokenName)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.ContractAdmin)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	return n
}

func sovEvent(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozEvent(x uint64) (n int) {
	return sovEvent(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *EventSettled) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventSettled: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventSettled: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tenant", wireType)
			}
			m.Tenant = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Tenant |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UtxrId", wireType)
			}
			m.UtxrId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UtxrId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RequestId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventRecord) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventRecord: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventRecord: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tenant", wireType)
			}
			m.Tenant = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Tenant |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UtxrId", wireType)
			}
			m.UtxrId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UtxrId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RequestId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nft", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Nft == nil {
				m.Nft = &types1.Nft{}
			}
			if err := m.Nft.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Recipients", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Recipients = append(m.Recipients, &Recipient{})
			if err := m.Recipients[len(m.Recipients)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Metadata = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			m.CreatedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreatedAt |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventCancel) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventCancel: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventCancel: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tenant", wireType)
			}
			m.Tenant = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Tenant |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UtxrId", wireType)
			}
			m.UtxrId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UtxrId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RequestId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventSettlementFailed) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventSettlementFailed: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventSettlementFailed: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tenant", wireType)
			}
			m.Tenant = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Tenant |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventDeployContract) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventDeployContract: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventDeployContract: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tenant", wireType)
			}
			m.Tenant = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Tenant |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractAdmin", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractAdmin = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEvent(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthEvent
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupEvent
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthEvent
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthEvent        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEvent          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupEvent = fmt.Errorf("proto: unexpected end of group")
)
